#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Dashboard de Visualiza√ß√£o do Sistema de Irriga√ß√£o Inteligente
=============================================================

Dashboard interativo desenvolvido com Streamlit para visualiza√ß√£o
em tempo real dos dados do sistema de irriga√ß√£o ESP32.

Funcionalidades:
- Visualiza√ß√£o de dados dos sensores em tempo real
- Gr√°ficos hist√≥ricos de umidade, pH e nutrientes
- Controle visual do estado da irriga√ß√£o
- Sistema de alertas e notifica√ß√µes
- An√°lise estat√≠stica e previs√µes
- Interface responsiva e intuitiva

Autor: FarmTech Solutions
Data: Janeiro 2025
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from datetime import datetime, timedelta
import sqlite3
import time
from pathlib import Path
import json

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Dashboard - Sistema de Irriga√ß√£o Inteligente",
    page_icon="üå±",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilos CSS customizados
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #2E7D32;
        text-align: center;
        margin-bottom: 1rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .alert-box {
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
    }
    .alert-critical {
        background-color: #ffebee;
        border-left: 5px solid #f44336;
    }
    .alert-warning {
        background-color: #fff3e0;
        border-left: 5px solid #ff9800;
    }
    .alert-info {
        background-color: #e3f2fd;
        border-left: 5px solid #2196f3;
    }
    .status-on {
        color: #4caf50;
        font-weight: bold;
    }
    .status-off {
        color: #f44336;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)


class DashboardApp:
    """Classe principal do dashboard"""
    
    def __init__(self):
        self.db_path = Path("../monitoring_database/soil_monitoring.db")
        self.init_session_state()
        
    def init_session_state(self):
        """Inicializa o estado da sess√£o"""
        if 'auto_refresh' not in st.session_state:
            st.session_state.auto_refresh = False
        if 'refresh_interval' not in st.session_state:
            st.session_state.refresh_interval = 5
        if 'selected_period' not in st.session_state:
            st.session_state.selected_period = '1h'
            
    def get_connection(self):
        """Obt√©m conex√£o com o banco de dados"""
        return sqlite3.connect(self.db_path)
        
    def load_sensor_data(self, hours=1):
        """Carrega dados dos sensores"""
        try:
            conn = self.get_connection()
            query = """
                SELECT 
                    timestamp,
                    humidity,
                    temperature,
                    ph,
                    CASE WHEN phosphorus THEN 40 ELSE 20 END as nitrogen,
                    CASE WHEN phosphorus THEN 45 ELSE 25 END as phosphorus,
                    CASE WHEN potassium THEN 35 ELSE 15 END as potassium,
                    0 as pump_state
                FROM sensor_readings
                WHERE timestamp > datetime('now', '-{} hours')
                ORDER BY timestamp DESC
            """.format(hours)
            
            df = pd.read_sql_query(query, conn)
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            conn.close()
            return df
        except Exception as e:
            st.error(f"Erro ao carregar dados: {e}")
            return pd.DataFrame()
            
    def load_irrigation_events(self, hours=24):
        """Carrega eventos de irriga√ß√£o"""
        try:
            conn = self.get_connection()
            query = """
                SELECT 
                    timestamp as event_time,
                    event_type,
                    duration_seconds,
                    trigger_source as trigger_reason
                FROM irrigation_events
                WHERE timestamp > datetime('now', '-{} hours')
                ORDER BY timestamp DESC
            """.format(hours)
            
            df = pd.read_sql_query(query, conn)
            df['event_time'] = pd.to_datetime(df['event_time'])
            conn.close()
            return df
        except Exception as e:
            st.error(f"Erro ao carregar eventos: {e}")
            return pd.DataFrame()
            
    def load_alerts(self, hours=24):
        """Carrega alertas do sistema"""
        try:
            conn = self.get_connection()
            query = """
                SELECT 
                    timestamp as alert_time,
                    alert_type,
                    CASE 
                        WHEN alert_type LIKE '%temperature%' THEN 'temperature'
                        WHEN alert_type LIKE '%humidity%' THEN 'humidity'
                        WHEN alert_type LIKE '%ph%' THEN 'ph'
                        ELSE 'sensor'
                    END as sensor_type,
                    sensor_value,
                    threshold_value,
                    message
                FROM alerts
                WHERE timestamp > datetime('now', '-{} hours')
                ORDER BY timestamp DESC
                LIMIT 20
            """.format(hours)
            
            df = pd.read_sql_query(query, conn)
            df['alert_time'] = pd.to_datetime(df['alert_time'])
            conn.close()
            return df
        except Exception as e:
            st.error(f"Erro ao carregar alertas: {e}")
            return pd.DataFrame()
            
    def load_system_stats(self):
        """Carrega estat√≠sticas do sistema"""
        try:
            conn = self.get_connection()
            query = """
                SELECT 
                    datetime('now') as stats_time,
                    COUNT(*) as total_readings,
                    AVG(humidity) as avg_humidity,
                    AVG(temperature) as avg_temperature,
                    AVG(ph) as avg_ph,
                    (SELECT COUNT(*) FROM irrigation_events WHERE event_type = 'start') as irrigation_count,
                    (SELECT COALESCE(SUM(duration_seconds)/60.0, 0) FROM irrigation_events) as total_irrigation_time
                FROM sensor_readings
                WHERE timestamp > datetime('now', '-24 hours')
            """
            
            df = pd.read_sql_query(query, conn)
            conn.close()
            
            if not df.empty:
                return df.iloc[0].to_dict()
            return None
        except Exception as e:
            st.error(f"Erro ao carregar estat√≠sticas: {e}")
            return None
            
    def create_gauge_chart(self, value, title, min_val, max_val, 
                          optimal_range=None, unit=""):
        """Cria um gr√°fico de medidor (gauge)"""
        if optimal_range:
            steps = [
                {'range': [min_val, optimal_range[0]], 'color': "lightgray"},
                {'range': optimal_range, 'color': "lightgreen"},
                {'range': [optimal_range[1], max_val], 'color': "lightgray"}
            ]
        else:
            steps = [{'range': [min_val, max_val], 'color': "lightgray"}]
            
        fig = go.Figure(go.Indicator(
            mode="gauge+number+delta",
            value=value,
            domain={'x': [0, 1], 'y': [0, 1]},
            title={'text': title, 'font': {'size': 20}},
            number={'suffix': unit, 'font': {'size': 24}},
            gauge={
                'axis': {'range': [min_val, max_val], 'tickwidth': 1, 
                        'tickcolor': "darkblue"},
                'bar': {'color': "darkblue"},
                'bgcolor': "white",
                'borderwidth': 2,
                'bordercolor': "gray",
                'steps': steps,
                'threshold': {
                    'line': {'color': "red", 'width': 4},
                    'thickness': 0.75,
                    'value': max_val * 0.9
                }
            }
        ))
        
        fig.update_layout(height=250, margin=dict(l=20, r=20, t=40, b=20))
        return fig
        
    def create_time_series_chart(self, df, columns, title):
        """Cria gr√°fico de s√©rie temporal"""
        fig = go.Figure()
        
        colors = px.colors.qualitative.Set3
        for i, col in enumerate(columns):
            if col in df.columns:
                fig.add_trace(go.Scatter(
                    x=df['timestamp'],
                    y=df[col],
                    mode='lines+markers',
                    name=col.replace('_', ' ').title(),
                    line=dict(color=colors[i % len(colors)], width=2),
                    marker=dict(size=4)
                ))
                
        fig.update_layout(
            title=title,
            xaxis_title="Tempo",
            yaxis_title="Valor",
            hovermode='x unified',
            height=400,
            showlegend=True,
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=1.02,
                xanchor="right",
                x=1
            )
        )
        
        fig.update_xaxis(rangeslider_visible=True)
        return fig
        
    def create_nutrient_bar_chart(self, n_val, p_val, k_val):
        """Cria gr√°fico de barras para nutrientes"""
        nutrients = ['Nitrog√™nio', 'F√≥sforo', 'Pot√°ssio']
        values = [n_val, p_val, k_val]
        colors = ['#4CAF50', '#FF9800', '#2196F3']
        
        fig = go.Figure(data=[
            go.Bar(
                x=nutrients,
                y=values,
                text=[f'{v:.1f}' for v in values],
                textposition='auto',
                marker_color=colors
            )
        ])
        
        fig.update_layout(
            title="N√≠veis de Nutrientes (NPK)",
            yaxis_title="Concentra√ß√£o",
            showlegend=False,
            height=300
        )
        
        return fig
        
    def render_sidebar(self):
        """Renderiza a barra lateral"""
        st.sidebar.markdown("## ‚öôÔ∏è Configura√ß√µes")
        
        # Per√≠odo de visualiza√ß√£o
        period_options = {
            '1h': '√öltima hora',
            '6h': '√öltimas 6 horas',
            '24h': '√öltimo dia',
            '7d': '√öltima semana',
            '30d': '√öltimo m√™s'
        }
        
        selected_period = st.sidebar.selectbox(
            "Per√≠odo de visualiza√ß√£o",
            options=list(period_options.keys()),
            format_func=lambda x: period_options[x],
            index=0
        )
        
        # Converte per√≠odo para horas
        period_hours = {
            '1h': 1,
            '6h': 6,
            '24h': 24,
            '7d': 168,
            '30d': 720
        }
        
        # Auto-refresh
        st.sidebar.markdown("### üîÑ Atualiza√ß√£o Autom√°tica")
        auto_refresh = st.sidebar.checkbox("Ativar auto-refresh", 
                                          value=st.session_state.auto_refresh)
        
        if auto_refresh:
            refresh_interval = st.sidebar.slider(
                "Intervalo (segundos)",
                min_value=5,
                max_value=60,
                value=st.session_state.refresh_interval,
                step=5
            )
            st.session_state.refresh_interval = refresh_interval
            
        st.session_state.auto_refresh = auto_refresh
        
        # Informa√ß√µes do sistema
        st.sidebar.markdown("### üìä Informa√ß√µes do Sistema")
        stats = self.load_system_stats()
        if stats:
            st.sidebar.metric("Total de Leituras", f"{stats['total_readings']:,}")
            st.sidebar.metric("Irriga√ß√µes Hoje", stats['irrigation_count'])
            st.sidebar.metric("Tempo Total Irriga√ß√£o", 
                            f"{stats['total_irrigation_time']:.1f} min")
            
        return period_hours[selected_period]
        
    def render_header(self):
        """Renderiza o cabe√ßalho"""
        st.markdown('<h1 class="main-header">üå± Sistema de Irriga√ß√£o Inteligente</h1>', 
                   unsafe_allow_html=True)
        st.markdown("---")
        
        # Informa√ß√µes de √∫ltima atualiza√ß√£o
        col1, col2, col3 = st.columns([2, 2, 1])
        with col1:
            st.info(f"üìÖ √öltima atualiza√ß√£o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        with col2:
            if st.session_state.auto_refresh:
                st.success(f"üîÑ Auto-refresh ativo ({st.session_state.refresh_interval}s)")
            else:
                st.warning("‚è∏Ô∏è Auto-refresh desativado")
        with col3:
            if st.button("üîÑ Atualizar Agora"):
                st.rerun()
                
    def render_current_status(self, df):
        """Renderiza status atual dos sensores"""
        st.markdown("## üìä Status Atual")
        
        if df.empty:
            st.warning("Nenhum dado dispon√≠vel")
            return
            
        # Obt√©m √∫ltima leitura
        latest = df.iloc[0]
        
        # Cria colunas para os medidores
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            fig = self.create_gauge_chart(
                latest['humidity'], 
                "Umidade do Solo", 
                0, 100, 
                optimal_range=[40, 60],
                unit="%"
            )
            st.plotly_chart(fig, use_container_width=True)
            
        with col2:
            fig = self.create_gauge_chart(
                latest['temperature'], 
                "Temperatura", 
                0, 50, 
                optimal_range=[20, 30],
                unit="¬∞C"
            )
            st.plotly_chart(fig, use_container_width=True)
            
        with col3:
            fig = self.create_gauge_chart(
                latest['ph_value'], 
                "pH do Solo", 
                0, 14, 
                optimal_range=[6, 7],
                unit=""
            )
            st.plotly_chart(fig, use_container_width=True)
            
        with col4:
            # Status da bomba
            pump_status = "LIGADA" if latest['pump_state'] else "DESLIGADA"
            pump_color = "status-on" if latest['pump_state'] else "status-off"
            
            st.markdown(f"""
            <div class="metric-card" style="text-align: center;">
                <h3>üíß Bomba de Irriga√ß√£o</h3>
                <h1 class="{pump_color}">{pump_status}</h1>
                <p>√öltima verifica√ß√£o: {latest['timestamp'].strftime('%H:%M:%S')}</p>
            </div>
            """, unsafe_allow_html=True)
            
        # Gr√°fico de nutrientes
        st.markdown("### üß™ An√°lise de Nutrientes")
        col1, col2 = st.columns([1, 2])
        
        with col1:
            st.metric("Nitrog√™nio (N)", f"{latest['nitrogen']:.1f}", 
                     delta=f"{latest['nitrogen'] - 30:.1f}")
            st.metric("F√≥sforo (P)", f"{latest['phosphorus']:.1f}", 
                     delta=f"{latest['phosphorus'] - 40:.1f}")
            st.metric("Pot√°ssio (K)", f"{latest['potassium']:.1f}", 
                     delta=f"{latest['potassium'] - 35:.1f}")
            
        with col2:
            fig = self.create_nutrient_bar_chart(
                latest['nitrogen'],
                latest['phosphorus'],
                latest['potassium']
            )
            st.plotly_chart(fig, use_container_width=True)
            
    def render_historical_data(self, df):
        """Renderiza dados hist√≥ricos"""
        st.markdown("## üìà Dados Hist√≥ricos")
        
        if df.empty:
            st.warning("Nenhum dado hist√≥rico dispon√≠vel")
            return
            
        # Tabs para diferentes visualiza√ß√µes
        tab1, tab2, tab3 = st.tabs(["Sensores Ambientais", "Nutrientes", "Irriga√ß√£o"])
        
        with tab1:
            # Gr√°fico de umidade e temperatura
            fig1 = self.create_time_series_chart(
                df, 
                ['humidity', 'temperature'], 
                "Umidade e Temperatura ao Longo do Tempo"
            )
            st.plotly_chart(fig1, use_container_width=True)
            
            # Gr√°fico de pH
            fig2 = self.create_time_series_chart(
                df, 
                ['ph_value'], 
                "pH do Solo ao Longo do Tempo"
            )
            st.plotly_chart(fig2, use_container_width=True)
            
        with tab2:
            # Gr√°fico de nutrientes
            fig3 = self.create_time_series_chart(
                df, 
                ['nitrogen', 'phosphorus', 'potassium'], 
                "N√≠veis de Nutrientes (NPK) ao Longo do Tempo"
            )
            st.plotly_chart(fig3, use_container_width=True)
            
            # An√°lise de correla√ß√£o
            if len(df) > 10:
                st.markdown("### üîç An√°lise de Correla√ß√£o")
                corr_cols = ['humidity', 'temperature', 'ph_value', 
                            'nitrogen', 'phosphorus', 'potassium']
                corr_data = df[corr_cols].corr()
                
                fig_corr = px.imshow(
                    corr_data,
                    text_auto=True,
                    aspect="auto",
                    color_continuous_scale='RdBu',
                    title="Matriz de Correla√ß√£o entre Sensores"
                )
                st.plotly_chart(fig_corr, use_container_width=True)
                
        with tab3:
            # Estado da bomba ao longo do tempo
            pump_df = df.copy()
            pump_df['pump_state'] = pump_df['pump_state'].astype(int)
            
            fig4 = go.Figure()
            fig4.add_trace(go.Scatter(
                x=pump_df['timestamp'],
                y=pump_df['pump_state'],
                mode='lines',
                line=dict(shape='hv', color='blue', width=2),
                fill='tozeroy',
                name='Estado da Bomba'
            ))
            
            fig4.update_layout(
                title="Estado da Bomba de Irriga√ß√£o",
                xaxis_title="Tempo",
                yaxis_title="Estado",
                yaxis=dict(
                    tickmode='array',
                    tickvals=[0, 1],
                    ticktext=['Desligada', 'Ligada']
                ),
                height=300
            )
            st.plotly_chart(fig4, use_container_width=True)
            
            # Eventos de irriga√ß√£o
            events_df = self.load_irrigation_events(24)
            if not events_df.empty:
                st.markdown("### üíß Eventos de Irriga√ß√£o")
                
                # Resumo
                col1, col2, col3 = st.columns(3)
                with col1:
                    total_events = len(events_df)
                    st.metric("Total de Eventos", total_events)
                with col2:
                    total_duration = events_df['duration_seconds'].sum() / 60
                    st.metric("Tempo Total", f"{total_duration:.1f} min")
                with col3:
                    avg_duration = events_df['duration_seconds'].mean()
                    st.metric("Dura√ß√£o M√©dia", f"{avg_duration:.0f} seg")
                    
                # Tabela de eventos
                st.dataframe(
                    events_df[['event_time', 'event_type', 'duration_seconds', 
                              'trigger_reason']].head(10),
                    use_container_width=True
                )
                
    def render_alerts(self):
        """Renderiza alertas do sistema"""
        st.markdown("## üö® Alertas e Notifica√ß√µes")
        
        alerts_df = self.load_alerts(24)
        
        if alerts_df.empty:
            st.success("‚úÖ Nenhum alerta ativo no momento")
            return
            
        # Contadores de alertas
        col1, col2, col3 = st.columns(3)
        
        critical_count = len(alerts_df[alerts_df['alert_type'] == 'critical'])
        warning_count = len(alerts_df[alerts_df['alert_type'] == 'warning'])
        info_count = len(alerts_df[alerts_df['alert_type'] == 'info'])
        
        with col1:
            st.metric("üî¥ Cr√≠ticos", critical_count)
        with col2:
            st.metric("üü° Avisos", warning_count)
        with col3:
            st.metric("üîµ Informativos", info_count)
            
        # Lista de alertas
        st.markdown("### üìã Alertas Recentes")
        
        for _, alert in alerts_df.head(10).iterrows():
            alert_class = f"alert-{alert['alert_type']}"
            icon = {"critical": "üî¥", "warning": "üü°", "info": "üîµ"}.get(
                alert['alert_type'], "‚ö™"
            )
            
            st.markdown(f"""
            <div class="alert-box {alert_class}">
                <strong>{icon} {alert['sensor_type'].upper()}</strong> - 
                {alert['alert_time'].strftime('%d/%m %H:%M')}
                <br>
                {alert['message']}
                <br>
                <small>Valor: {alert['sensor_value']:.2f} | 
                Limite: {alert['threshold_value']:.2f}</small>
            </div>
            """, unsafe_allow_html=True)
            
    def render_analytics(self, df):
        """Renderiza an√°lises e previs√µes"""
        st.markdown("## üîÆ An√°lise e Previs√µes")
        
        if df.empty or len(df) < 10:
            st.info("Dados insuficientes para an√°lise preditiva")
            return
            
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### üìä Estat√≠sticas do Per√≠odo")
            
            # Estat√≠sticas descritivas
            stats_df = df[['humidity', 'temperature', 'ph_value']].describe()
            st.dataframe(stats_df, use_container_width=True)
            
            # Tend√™ncias
            st.markdown("### üìà Tend√™ncias Observadas")
            
            # Calcula tend√™ncias simples
            humidity_trend = np.polyfit(range(len(df)), df['humidity'], 1)[0]
            temp_trend = np.polyfit(range(len(df)), df['temperature'], 1)[0]
            ph_trend = np.polyfit(range(len(df)), df['ph_value'], 1)[0]
            
            trends = {
                "Umidade": "‚Üë Aumentando" if humidity_trend > 0 else "‚Üì Diminuindo",
                "Temperatura": "‚Üë Aumentando" if temp_trend > 0 else "‚Üì Diminuindo",
                "pH": "‚Üë Aumentando" if ph_trend > 0 else "‚Üì Diminuindo"
            }
            
            for sensor, trend in trends.items():
                st.write(f"**{sensor}**: {trend}")
                
        with col2:
            st.markdown("### üéØ Recomenda√ß√µes")
            
            # An√°lise das condi√ß√µes atuais
            latest = df.iloc[0]
            recommendations = []
            
            if latest['humidity'] < 40:
                recommendations.append("üíß Umidade baixa - considere aumentar irriga√ß√£o")
            elif latest['humidity'] > 60:
                recommendations.append("üí¶ Umidade alta - reduza a irriga√ß√£o")
                
            if latest['ph_value'] < 6:
                recommendations.append("üß™ pH √°cido - considere corre√ß√£o com calc√°rio")
            elif latest['ph_value'] > 7:
                recommendations.append("üß™ pH alcalino - considere corre√ß√£o com sulfato")
                
            if latest['nitrogen'] < 20:
                recommendations.append("üå± Nitrog√™nio baixo - aplique fertilizante nitrogenado")
                
            if latest['phosphorus'] < 30:
                recommendations.append("üåø F√≥sforo baixo - aplique fertilizante fosfatado")
                
            if latest['potassium'] < 25:
                recommendations.append("üçÉ Pot√°ssio baixo - aplique fertilizante pot√°ssico")
                
            if recommendations:
                for rec in recommendations:
                    st.info(rec)
            else:
                st.success("‚úÖ Todas as condi√ß√µes est√£o dentro dos par√¢metros ideais!")
                
            # Previs√£o de pr√≥xima irriga√ß√£o
            st.markdown("### ‚è∞ Previs√£o de Irriga√ß√£o")
            
            # Estimativa simples baseada na taxa de perda de umidade
            if len(df) > 2:
                humidity_rate = (df.iloc[0]['humidity'] - df.iloc[-1]['humidity']) / len(df)
                if humidity_rate < 0:  # Umidade diminuindo
                    hours_to_irrigation = (latest['humidity'] - 40) / abs(humidity_rate)
                    st.write(f"Pr√≥xima irriga√ß√£o estimada em: **{hours_to_irrigation:.1f} horas**")
                else:
                    st.write("Umidade est√°vel ou aumentando - irriga√ß√£o n√£o necess√°ria")
                    
    def run(self):
        """Executa o dashboard"""
        # Renderiza sidebar e obt√©m per√≠odo selecionado
        period_hours = self.render_sidebar()
        
        # Renderiza cabe√ßalho
        self.render_header()
        
        # Carrega dados
        df = self.load_sensor_data(period_hours)
        
        # Renderiza se√ß√µes
        self.render_current_status(df)
        st.markdown("---")
        
        self.render_historical_data(df)
        st.markdown("---")
        
        self.render_alerts()
        st.markdown("---")
        
        self.render_analytics(df)
        
        # Auto-refresh
        if st.session_state.auto_refresh:
            time.sleep(st.session_state.refresh_interval)
            st.rerun()


def main():
    """Fun√ß√£o principal"""
    app = DashboardApp()
    app.run()


if __name__ == "__main__":
    main()